@page "/cards"
@using CardBid.Data.Models
@using CardBid.DataAcessLibrary
@inject ILeiloesData LeiloesService
@inject ILicitacoesData LicitacoesService
@inject IFotosData FotosService
@inject IContaData ContaService
@inject ICategoriaData CategoriaService
@inject IGrauDegradacaoData GrauDegradacaoService
@inject NavigationManager NavigationManager

@code {
    private int currentPage = 1;
    private int pageSize = 6; // Adjust the number of cards per page as needed
    private int totalCards => leiloes.Count; // Total number of cards

    private string FilterCategoria = "";
    private string FilterUser = "";
    private (int, int) FilterPreco = (0, 0);
    private int FilterGrauDegradacao = 0;
    private DateTime? FilterDate = null;
    private string FilterOrder = "PriceLowToHigh";
    private string search = "";

    private Dictionary<int, Leiloes> Allleiloes = new Dictionary<int, Leiloes>();
    private Dictionary<int, decimal> currentBids = new Dictionary<int, decimal>();

    private List<Leiloes> leiloes
    {
        get 
        {    
            var filteredLeiloes = Allleiloes.Values.Where(l =>
                        (FilterCategoria == "" || l.Categoria == FilterCategoria) &&
                        (FilterUser == "" || usernames[l.VendedorId] == FilterUser) &&
                        (FilterPreco == (0,0) || (FilterPreco.Item1<currentBids[l.Id] && FilterPreco.Item2> currentBids[l.Id])) &&
                        (FilterGrauDegradacao == 0 || l.GrauDeDegradacao == FilterGrauDegradacao) &&
                        (FilterDate == null || l.DataLimite <= FilterDate) &&
                        (search == "" || l.Titulo.Contains(search, StringComparison.OrdinalIgnoreCase))
                        ).OrderBy(l => currentBids[l.Id]).ToList();
            switch(FilterOrder)
            {
                case "PriceLowToHigh":
                    return filteredLeiloes.OrderBy(l => currentBids[l.Id]).ToList();
                case "PriceHighToLow":
                    return filteredLeiloes.OrderByDescending(l => currentBids[l.Id]).ToList();
                case "Level":
                    return filteredLeiloes.OrderBy(l => l.GrauDeDegradacao).ToList();
                default:
                    return filteredLeiloes;
            }
        }
    }

    private Dictionary<int, Fotos> fotos = new Dictionary<int, Fotos>();
    private Dictionary<int, string> usernames = new Dictionary<int, string>();
    private List<Categorias> collections = new List<Categorias>();
    private List<GrauDegradacao> levels = new List<GrauDegradacao>();

    private int TotalPages => totalCards == 0 ? 1 : (int)Math.Ceiling((double)totalCards / pageSize);

    void ChangePage(int newPage)
    {
        if (newPage >= 1 && newPage <= TotalPages)
        {
            currentPage = newPage;
        }
    }

    protected override void OnInitialized()
    {
        Allleiloes = LeiloesService.ListAllAccepted();
        int[] ids = Allleiloes.Keys.ToArray();
        fotos = FotosService.ListAllbyLeilao(ids);
        usernames = ContaService.getAllUsernames(Allleiloes.Select(l => l.Value.VendedorId).ToArray());
        collections = CategoriaService.GetCategorias();
        levels = GrauDegradacaoService.GetGrausDegradacao();

        foreach (var l in Allleiloes.Values)
        {
            if (l.MaiorLicitacao != null)
            {
                currentBids.Add(l.Id, LicitacoesService.getLicitacao(l.MaiorLicitacao.Value).Valor);
            }
            else
            {
                currentBids.Add(l.Id, l.PrecoInicial);
            }
        }
    }

    private void ShowCard(Leiloes leilao)
    {
        NavigationManager.NavigateTo($"/cards/buy/{leilao.Id}");
    }

    private void UpdateFilterPreco(ChangeEventArgs e)
    {
    switch (e.Value)
    {
        case "1":
            FilterPreco = (0, 50);
            break;
        case "2":
            FilterPreco = (50, 100);
            break;
        case "3":
            FilterPreco = (100, 250);
            break;
        case "4":
            FilterPreco = (250, 500);
            break;
        case "5":
            FilterPreco = (500, 100000);
            break;
        default:
            FilterPreco = (0, 0);
            break;
        }
    }

    private void NavigateToSellerProfile(int sellerId)
    {
        string username = usernames[sellerId];
        NavigationManager.NavigateTo($"/profile/{username}/{sellerId}");
    }
}

<div class="min-h-screen h-full flex flex-col">
    <!-- Header Section -->
    <div class="flex flex-row h-full border-black border-y-2 bg-gray-200 items-center justify-between px-4 py-6 mt-5">
        <div class="flex space-x-16 items-center">
            <div class="flex items-center space-x-2">
                <span>ðŸŸ¢</span>
                <span class="text-2xl font-bold">Live</span>
            </div>
            <span class="text-xl">Showing: @totalCards results</span>
        </div>

        <div class="flex flex-col space-y-4">
            <input style='width: 700px' type="search" placeholder="Search" class="border-black border-2 px-4 py-2 rounded" @bind="search">
        </div>

        <select class="border-2 bg-white border-black rounded px-2 py-4 w-64" @bind="FilterOrder">
            <option value="PriceLowToHigh">Price Low to High</option>
            <option value="PriceHighToLow">Price High to Low</option>
            <option value="Level">Level</option>
        </select>
    </div>

    <!-- Filters and Cards Section -->
    <div class="flex flex-row">
        <!-- Filters Sidebar -->
        <div class="bg-gray-200 h-fit w-1/3 p-4">
            <h1 class="font-bold text-3xl mb-2">Filters</h1>
            <select class="bg-gray-200 font-bold px-2 py-4 w-64 focus:border-black border-2 mb-2" @bind="FilterUser">
                <option value="">Owner</option>
                @foreach (var user in usernames.Values)
                {
                    <option>@user</option>
                }
            </select>

            <select class="bg-gray-200 font-bold px-2 py-4 w-64 focus:border-black border-2 mb-2" @bind="FilterCategoria">
                <option value="">Collection</option>
                @foreach (var collection in collections)
                {
                    <option>@collection.categoria</option>
                }
            </select>

            <select class="bg-gray-200 font-bold px-2 py-4 w-64 focus:border-black border-2 mb-2" @bind="FilterGrauDegradacao">
                <option value=0>Degradation</option>
                @foreach (var level in levels)
                {
                    <option value="@level.grauDegradacao">@level.Designacao</option>
                }
            </select>

            <select class="bg-gray-200 font-bold px-2 py-4 w-64 focus:border-black border-2 mb-2" @onchange="UpdateFilterPreco">
                <option value="0">Price</option>
                <option value="1">0â‚¬ - 50â‚¬</option>
                <option value="2">50â‚¬ - 100â‚¬</option>
                <option value="3">100â‚¬ - 250â‚¬</option>
                <option value="4">250â‚¬ - 500â‚¬</option>
                <option value="5">500â‚¬ +</option>
            </select>

            <select class="bg-gray-200 font-bold px-2 py-4 w-64 focus:border-black border-2 mb-2" @bind="FilterDate">
                <option value="">Final Date</option>
                <option value="@DateTime.Now.AddDays(1)">Within a Day</option>
                <option value="@DateTime.Now.AddDays(7)">Within a Week</option>
                <option value="@DateTime.Now.AddMonths(1)">Within a Month</option>
            </select>
        </div>

        <!-- Card Display Section with Pagination -->
        <div class="flex flex-row flex-wrap justify-center space-x-4 space-y-4 py-8">
            <style>
                img {
                display: block;
                max-width: 380px;
                max-height: 380px;
                width: auto;
                height: auto;
                }
            </style>
            @{
                @foreach (var card in Enumerable.Range((currentPage - 1) * pageSize + 1, Math.Min(pageSize, leiloes.Count - (currentPage - 1) * pageSize)))
                {
                    var currentLeilao = leiloes[card - 1];
                    var currentFoto = fotos[currentLeilao.Id].Foto;
                    var currentBid = currentBids[currentLeilao.Id].ToString();

                    <div class="ml-2 w-96 border-black border-2 object-fit:contain @((card == 1) ? "border-t-2 mt-5" : "")">
                        <img src="@fotos[leiloes[card-1].Id].Foto" alt="Card Image" @onclick="() => ShowCard(currentLeilao)" class="w-full"/>
                        <div class="flex flex-col bg-white p-4">
                            <span class="text-xl font-bold" @onclick="() => NavigateToSellerProfile(currentLeilao.VendedorId)" >Seller: @usernames[currentLeilao.VendedorId]</span>
                            <span class="text-xl font-bold">Card: @currentLeilao.Titulo</span>
                            <span class="text-xl font-bold">Auction Time Limit: @currentLeilao.DataLimite.ToString("MM/dd - HH:mm")</span>
                        </div>
                        <div class="bg-white p-4">
                            <span class="text-xl">Last Bid:@(currentLeilao.MaiorLicitacao == null ? $"No bids yet. Price: {currentBid}" : currentBid)â‚¬</span>
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Pagination Controls -->
    <div class="flex justify-center items-center my-4">
        <button class="px-4 py-2 bg-gray-200" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
        <span class="mx-4">Page @currentPage of @TotalPages</span>
        <button class="px-4 py-2 bg-gray-200" @onclick="() => ChangePage(currentPage + 1)">Next</button>
    </div>
</div>
