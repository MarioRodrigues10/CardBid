@page "/profile/{username}/{id:int}"
@using CardBid.Data
@using CardBid.Data.Models
@using CardBid.DataAcessLibrary
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject ILeiloesData LeiloesService
@inject IFaturaData FaturasService
@inject IUtilizadoresData UtilizadoresService
@inject NavigationManager NavigationManager
@inject IFotosData FotosService
@inject ILicitacoesData LicitacoesService

@code {
    int currentPage = 1;
    string nome;
    int pageSize = 6;
    List<Leiloes> userLeiloes = new List<Leiloes>();
    int totalCards => userLeiloes.Count;
    string selectedButton = "Created";
    string currentSortOption = "Price Low to High";
    Dictionary<int,decimal> userLicitacoesValor = new Dictionary<int, decimal>();
    Dictionary<int, Fotos> fotos = new Dictionary<int, Fotos>();
    Dictionary<int, Faturas> faturas = new Dictionary<int, Faturas>();
    int? currentId;
    bool showFatura => selectedButton == "Collected" && currentId == id;

    private int TotalPages => totalCards == 0 ? 1 : (int)Math.Ceiling((double)totalCards / pageSize);

    [Parameter]
    public int id { get; set; }

    [Parameter]
    public string username { get; set; }

    void ChangePage(int newPage)
    {
        if (newPage >= 1 && newPage <= TotalPages)
        {
            currentPage = newPage;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        nome = await UtilizadoresService.GetNome(id);
        
        userLeiloes = await LeiloesService.GetCreatedLeiloes(id);
        await SortLeiloes();
        currentId = await LocalStorage.GetItemAsync<int?>("id");
    }
}

<div class="min-h-screen h-fit max-w-screen">

    <!-- Header Section -->
    <div class="w-full h-64 bg-gray-200"></div>
    <div class="w-56 h-56 bg-gray-200 rounded-full absolute -mt-32 ml-8 border-4 border-black flex items-center justify-center">
        <img style="display: block; max-height: 380px; max-width: 380px; width: auto; height: auto; object-fit: cover;" src="UserIcon.png" alt="usericon"/>
    </div>
    <div class="ml-80 w-full mt-4">
        <h1 class="text-3xl font-bold">@nome</h1>
        <p class="text-xl">@username</p>
    </div>
    <div class="flex flex-row justify-center items-center space-x-16 mt-32">
        <button class="w-64 h-16 bg-gray-200 mt-4 border-1 border-black text-center my-auto hover:text-bold" @onclick="() => FetchCreatedLeiloes()"><span class="text-center text-2xl">Created</span></button>
        <button class="w-64 h-16 bg-gray-200 mt-4 border-1 border-black text-center my-auto hover:text-bold" @onclick="() => FetchCollectedLeiloes()"><span class="text-center text-2xl">Collected</span></button>
        <button class="w-64 h-16 bg-gray-200 mt-4 border-1 border-black text-center my-auto hover:text-bold" @onclick="() => FetchOffersMadeLeiloes()"><span class="text-center text-2xl">Offers Made</span></button>
        <button class="w-64 h-16 bg-gray-200 mt-4 border-1 border-black text-center my-auto hover:text-bold" @onclick="() => FetchDealsLeiloes()"><span class="text-center text-2xl">Deals</span></button>
    </div>   
    <!-- Bar Section -->
    <div class="flex flex-row h-full border-black border-y-2 items-center justify-between px-8 py-6 mt-5">
        <div class="flex space-x-16 items-center">
            <input type="search" placeholder="Search" @bind="searchTerm" class="border-black border-2 px-4 py-2 rounded w-96">
        </div>
        <select class="border-2 bg-white border-black rounded px-2 py-4 w-64 font-bold" @onchange="HandleSortChange">
            <option>Price Low to High</option>
            <option>Price High to Low</option>
            <option>Level</option>
        </select>
    </div>
    
    <!-- Card Section -->
    <div class="flex flex-row flex-wrap justify-center space-x-4 space-y-4 py-8">
        @foreach (var leilao in userLeiloes
            .Where(l => string.IsNullOrWhiteSpace(searchTerm) || l.Titulo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize))
        {
            <div class="ml-2 bg-gray-300 w-full md:w-96 border-black border-2 @((leilao == userLeiloes.First()) ? "border-t-2 mt-5" : "")">
                <style>
                    img {
                        display: block;
                        max-width: 380px;
                        max-height: 380px;
                        width: auto;
                        height: auto;
                    }
                </style>
                <img src="@fotos[leilao.Id].Foto" alt="Card Image" @onclick="() => ShowCard(leilao.Id)" class="w-full" />   <!-- you can access the leilao if you touch the image -->
                <div class="flex flex-col bg-white p-4">
                    <span class="text-xl font-bold">Seller: @leilao.VendedorId</span>
                    <span class="text-xl font-bold">Card: @leilao.Titulo</span>
                    <span class="text-xl font-bold">Auction Time Limit: @leilao.DataLimite</span>
                </div>
            </div>
        }
    </div>

    <!-- Pagination Section -->
    <div class="flex justify-center items-center my-4">
        <button class="px-4 py-2 bg-gray-200" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
        <span class="mx-4">Page @currentPage of @TotalPages</span>
        <button class="px-4 py-2 bg-gray-200" @onclick="() => ChangePage(currentPage + 1)">Next</button>
    </div>
</div>

@code{
    string searchTerm = "";

    private async Task SortLeiloes(){
        switch(currentSortOption){
            case "Price Low to High":
                userLicitacoesValor =  await LicitacoesService.GetLicitacoesValor(userLeiloes);
                userLeiloes = userLeiloes.OrderBy(l => userLicitacoesValor[l.Id]).ToList();
                fotos = FotosService.ListAllbyLeilao(userLeiloes.Select(l => l.Id).ToArray());
                break;
            case "Price High to Low":
                userLicitacoesValor = await LicitacoesService.GetLicitacoesValor(userLeiloes);
                userLeiloes = userLeiloes.OrderByDescending(l => userLicitacoesValor[l.Id]).ToList();
                fotos = FotosService.ListAllbyLeilao(userLeiloes.Select(l => l.Id).ToArray());
                break;
            case "Level":
                userLeiloes = userLeiloes.OrderBy(l => l.GrauDeDegradacao).ToList();
                break;
        }
        StateHasChanged();
    }

    private async void HandleSortChange(ChangeEventArgs e)
    {
        currentSortOption = e.Value.ToString();
        await SortLeiloes();
    }

    private async Task FetchCreatedLeiloes()
    {
        selectedButton = "Created";
        userLeiloes = await LeiloesService.GetCreatedLeiloes(id);
        await SortLeiloes();
    }


    private async Task FetchCollectedLeiloes()
    {
        selectedButton = "Collected";
        userLeiloes = await LeiloesService.GetCollectedLeiloes(id);
        faturas = await FaturasService.GetFaturas(id);
        await SortLeiloes();
    }

    private async Task FetchOffersMadeLeiloes()
    {
        selectedButton = "Offers Made";
        userLeiloes = await LeiloesService.GetOffersMadeLeiloes(id);
        await SortLeiloes();
    }

    private async Task FetchDealsLeiloes()
    {
        selectedButton = "Deals";
        userLeiloes = await LeiloesService.GetDealsLeiloes(id);
        await SortLeiloes();
    }

    private void ShowCard(int id)
    {
        NavigationManager.NavigateTo($"/cards/buy/{id}");
    }
}